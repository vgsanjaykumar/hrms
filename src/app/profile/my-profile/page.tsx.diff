import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';
import { EnvironmentOutlined, PhoneOutlined, ManOutlined, WomanOutlined, GiftOutlined, MailOutlined } from '@ant-design/icons';

=======
'use client';
import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';
import { EnvironmentOutlined, PhoneOutlined, ManOutlined, WomanOutlined, GiftOutlined, MailOutlined } from '@ant-design/icons';
import AlgoliaPlacesInput from './AlgoliaPlacesInput';

>>>>>>> REPLACE
<<<<<<< SEARCH
  const [googleScriptLoaded, setGoogleScriptLoaded] = useState(false);

  useEffect(() => {
    // Dynamically load Google Maps JavaScript API script
    if (!window.google) {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places`;
      script.async = true;
      script.onload = () => {
        setGoogleScriptLoaded(true);
      };
      script.onerror = () => {
        console.error('Error loading Google Maps script');
      };
      document.head.appendChild(script);
    } else {
      setGoogleScriptLoaded(true);
    }
  }, []);
=======
  const [googleScriptLoaded, setGoogleScriptLoaded] = useState(false);

  // Removed Google Maps script loading useEffect and googleScriptLoaded state

>>>>>>> REPLACE
<<<<<<< SEARCH
          {googleScriptLoaded ? (
              <PlacesAutocomplete
                value={address}
                onChange={setAddress}
                onSelect={handleSelect}
              >
                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (
                  <div className="w-full">
                    <input
                      {...getInputProps({
                        placeholder: 'Search Address ...',
                        className: 'w-full border border-gray-300 rounded px-2 py-1',
                      })}
                    />
                    <div className="absolute z-10 bg-white border border-gray-300 rounded mt-1 w-full max-h-60 overflow-auto">
                      {loading && <div>Loading...</div>}
                      {suggestions.map((suggestion, index) => {
                        const className = suggestion.active
                          ? 'bg-purple-600 text-white cursor-pointer p-2'
                          : 'bg-white text-gray-900 cursor-pointer p-2';
                        return (
                          <div
                            {...getSuggestionItemProps(suggestion, { className })}
                            key={index}
                          >
                            <span>{suggestion.description}</span>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </PlacesAutocomplete>
            ) : (
              <p>Loading Google Maps...</p>
            )}
=======
          <AlgoliaPlacesInput
            value={address}
            onChange={setAddress}
            onSelect={handleSelect}
          />
>>>>>>> REPLACE
<<<<<<< SEARCH
  const handleSelect = async (value: string) => {
    setAddress(value);
    try {
      const results = await geocodeByAddress(value);
      const latLng = await getLatLng(results[0]);
      setProfile((prev: any) => ({
        ...prev,
        location: value,
        latLng,
      }));
      saveProfile();
    } catch (error) {
      console.error('Error', error);
    }
  };
=======
  const handleSelect = async (value: string) => {
    setAddress(value);
    setProfile((prev: any) => ({
      ...prev,
      location: value,
    }));
    saveProfile();
  };
